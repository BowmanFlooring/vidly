1. Models and Databases

In Django, we don't have to manually create create database tables for
our web apps - Django automatically creates them for us, based on our
models. Every time a new model class is created, or an existing model
class is modified, we are telling Django to compare our model classes
with our database. It will look at our database, figure out the tables
and columns we have, and calculate the difference between our model 
classes and our database tables. Based on that information, Django will
create what's called a 'migration'. A migration is esentially a Python
file that includes some code - when we run that file (migration), it 
will synchronize our database with our model classes.

USAGE: 

The first step in the migration process it to make the migration file.
From the terminal, run the following:

```
python3 manage.py makemigrations
```

NOTE: By default, Django is not aware of our model classes. We have to
make that happen by registering our app (in this case, 'movies') with
Django. Here's how that is accomplished:

    1. From the site's like-named folder, open the 'settings.py' file.
           - This is the 'package' folder auto-generated by Django,
             which in this case is the 'vidly' package folder.
    2. Inside the 'INSTALLED_APPS' list, we need to add our app to the
       bottom of that list, so that Django can keep track of our model
       classes in the app. The COMPLETE PATH to the necessary class
       must be provided. That class the 'MoviesConfig' class, located
       in the 'apps' module of the 'movies' package. So, the path is:
                    'movies.apps.MoviesConfig'
    3. Once added, save the changes, and the 'makemigrations' command
       can be properly executed. So, in the terminal, when run again,
       we should see something like this:
       
       Migrations for 'movies':
         movies/migrations/0001_initial.py
           - Create model Genre
           - Create model Movie
       
       An actual migration has NOT yet taken place. The file that we
       have generated simply describes the operations that need to 
       be performed on the database to bring it up to date with our
       current model classes.
    4. Now we can officially RUN the migration. And pending migrations
       can be run with the following command in the terminal:
       
       ```
       python3 manage.py migrate
       ```

       That command will generate an output that looks something like:

       Operations to perform:
          Apply all migrations: admin, auth, contenttypes, movies, sessions
        Running migrations:
          Applying contenttypes.0001_initial... OK
          Applying auth.0001_initial... OK
          Applying admin.0001_initial... OK
          Applying admin.0002_logentry_remove_auto_add... OK
          Applying admin.0003_logentry_add_action_flag_choices... OK
          Applying contenttypes.0002_remove_content_type_name... OK
          Applying auth.0002_alter_permission_name_max_length... OK
          Applying auth.0003_alter_user_email_max_length... OK
          Applying auth.0004_alter_user_username_opts... OK
          Applying auth.0005_alter_user_last_login_null... OK
          Applying auth.0006_require_contenttypes_0002... OK
          Applying auth.0007_alter_validators_add_error_messages... OK
          Applying auth.0008_alter_user_username_max_length... OK
          Applying auth.0009_alter_user_last_name_max_length... OK
          Applying movies.0001_initial... OK
          Applying sessions.0001_initial... OK

    NOTE: Along with creating/updating tables to conform to the structure
          of our model classes, Django also creates a table to keep track
          of all of our migrations - the name, datetime, etc. THIS TABLE 
          IS 100% NECESSARY! DO NOT DELETE THIS TABLE. DELETING IT COULD
          HAVE ADVERSE/UNWANTED EFFECTS!